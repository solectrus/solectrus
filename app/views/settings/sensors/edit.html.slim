- content_for :sub_nav do
  .flex.justify-between.items-center
    .hidden.lg:block.py-5
      = render Nav::Sub::Component.new do |c|
        = c.with_items nav_items

- content_for :bottom_nav do
  = render Nav::Sub::Component.new do |c|
    = c.with_items nav_items

= form_with url: settings_sensors_path, method: :patch, html: { class: 'relative px-2' } do |f|
  = f.group title: t('settings.sensors.description') do
    .mt-5
      = render VerticalTabs::Component.new do |c|
        = c.with_tab id: 'generators', label: t('settings.sensors.generators') do
          - if SensorConfig.x.multi_inverter?
            .grid.grid-cols-1.sm:grid-cols-2.gap-4
              - SensorConfig.x.existing_custom_inverter_sensor_names.each do |sensor_name|
                .flex.flex-col
                  = f.text_field "sensor_names[#{sensor_name}]",
                                 value: SensorConfig.x.display_name(sensor_name),
                                 class: 'form-input',
                                 label: "#{sensor_name} (#{SensorConfig.x.public_send(sensor_name)})"

            hr.my-5.text-transparent
            = f.check_box 'general[inverter_as_total]',
                          checked: Setting.inverter_as_total,
                          label: I18n.t('settings.sensors.inverter_as_total')
          - else
            p.mb-5.text-gray-500
              = t('settings.sensors.single_inverter')

          = f.check_box 'general[enable_multi_inverter]',
                        checked: Setting.enable_multi_inverter,
                        label: I18n.t('settings.sensors.enable_multi_inverter')

        - if SensorConfig.x.exists_any?(*@consumer_sensors)
          = c.with_tab id: 'consumers', label: t('settings.sensors.consumers') do
            .grid.grid-cols-1.sm:grid-cols-2.gap-4
              - @consumer_sensors.each do |sensor_name|
                - if SensorConfig.x.exists?(sensor_name)
                  .flex.flex-col
                    = f.text_field "sensor_names[#{sensor_name}]",
                                  value: SensorConfig.x.display_name(sensor_name),
                                  class: 'form-input',
                                  label: "#{sensor_name} (#{SensorConfig.x.public_send(sensor_name)})"

            hr.my-5.text-transparent
            = f.check_box 'general[enable_custom_consumer]',
                          checked: Setting.enable_custom_consumer,
                          label: I18n.t('settings.sensors.enable_custom_consumer')

        - if SensorConfig.x.exists_any?(*@battery_sensors)
          = c.with_tab id: 'battery', label: t('settings.sensors.battery') do
            .grid.grid-cols-1.sm:grid-cols-2.gap-4
              - @battery_sensors.each do |sensor_name|
                - if SensorConfig.x.exists?(sensor_name)
                  .flex.flex-col
                    = f.text_field "sensor_names[#{sensor_name}]",
                                  value: SensorConfig.x.display_name(sensor_name),
                                  class: 'form-input',
                                  label: "#{sensor_name} (#{SensorConfig.x.public_send(sensor_name)})"

  = f.submit t('crud.save')
