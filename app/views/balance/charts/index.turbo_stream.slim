= turbo_stream.update frame_id('nav') do
  = render Timeframe::Component.new(timeframe:)

= turbo_stream.update frame_id('second-nav-desktop') do
  = render Nav::Sub::Component.new do |c|
    = c.with_items nav_items

= turbo_stream.update frame_id('second-nav-mobile') do
  = render Nav::Sub::Component.new do |c|
    = c.with_items nav_items

= turbo_stream.update frame_id('chart') do
  .flex.flex-col.flex-auto.sm:gap-2
    - unless timeframe.out_of_range?
      .flex.gap-2.justify-between.items-center
        - if sensor == :inverter_power && \
             timeframe.day? && !timeframe.future? && \
             SensorConfig.x.multi_inverter? && \
             SensorConfig.x.exists?(:inverter_power_forecast)
          = render Radio::Component.new( \
            name: 'chart_variant',
            choices: [ \
              { id: 'total', label: I18n.t('chart.inverter_total') },
              { id: 'split', label: I18n.t('chart.inverter_split') },
            ],
            url: url_for( \
              permitted_params.to_hash.symbolize_keys.merge( \
                controller: "#{controller_namespace}/charts",
              ),
            ),
          )
        - else
          div
        = render ChartSelector::Component.new(sensor:, timeframe:, sensors: chart_sensors)
      = render ChartLoader::Component.new(sensor:, timeframe:, variant: chart_variant)

      - if timeframe.day? && sensor == :inverter_power && chart_variant == 'total'
        = render ForecastComment::Component.new(calculator:, sensor:, timeframe:)
