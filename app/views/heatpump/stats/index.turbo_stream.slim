= turbo_stream.update frame_id('nav') do
  = render Timeframe::Component.new(timeframe:)

- if timeframe.now? && SensorConfig.x.exists?(:heatpump_status)
  = turbo_stream.update frame_id('status') do
    = render Status::Component.new time: calculator.time,
                                   status: calculator.heatpump_status

turbo-stream action="morph" target= frame_id('stats') children-only= true
  template
    div
      .h-full.w-full.flex.flex-col.gap-3
        .flex-1.flex
          = render SegmentContainer::Component.new tippy_placement: 'top',
                                                   calculator:,
                                                   timeframe: do |balance|
            - balance.with_segment :heatpump_heating_env,
                                    color_class: [calculator.heatpump_heating? ? 'bg-sky-500/40 dark:bg-sky-700/70' : 'bg-slate-500/40 dark:bg-slate-400/40', 'relative z-0'],
                                    title: nil,
                                    percent: calculator.heatpump_heating_env_percent || 90 do
              - if calculator.outdoor_temp
                = link_to heatpump_home_path(sensor: 'outdoor_temp', timeframe:),
                          class: 'absolute top-5 left-5 text-slate-800 dark:text-slate-300',
                          data: { \
                            turbo_prefetch: 'false',
                            turbo_frame: frame_id('chart'),
                            turbo_action: 'replace',
                            controller: 'tippy',
                          },
                          title: SensorConfig.x.name(:outdoor_temp) do
                  = Number::Component.new(value: calculator.outdoor_temp).to_grad_celsius

              - if calculator.heatpump_score
                = link_to heatpump_home_path(sensor: 'heatpump_score', timeframe:),
                          class: 'absolute top-3 right-3',
                          data: { turbo_prefetch: 'false', turbo_frame: frame_id('chart'), turbo_action: 'replace' } do
                  = render HeatpumpScore::Component.new(calculator.heatpump_score)

              .absolute.bottom-2.-mb-5.mx-auto.bg-yellow-900.px-6.py-3.rounded-full.z-10.text-center.text-slate-300
                .text-xl
                  = Number::Component.new(value: calculator.heatpump_heating_power).to_watt_hour
                .text-xs.uppercase
                  = SensorConfig.x.name(:heatpump_heating_power)

              .flex.gap-5
                - if calculator.heatpump_cop
                  = link_to heatpump_home_path(sensor: 'heatpump_cop', timeframe:),
                            data: { turbo_prefetch: 'false', turbo_frame: frame_id('chart'), turbo_action: 'replace' } do
                    = render RadialBadge::Component.new(title: t('calculator.heatpump_cop')) do
                      = Number::Component.new(value: calculator.heatpump_cop).to_plain

            - balance.with_segment :heatpump_power,
                                    inline: true,
                                    color_class: 'bg-slate-600 dark:text-slate-300',
                                    percent: calculator.heatpump_heating? ? calculator.heatpump_heating_power_percent : 10,
                                    title: 'Strom',
                                    icon_class: false
