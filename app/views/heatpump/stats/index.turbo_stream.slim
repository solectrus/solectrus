= turbo_stream.update frame_id('timeframe') do
  = render Timeframe::Component.new(timeframe:)

- if timeframe.now? && SensorConfig.x.exists?(:heatpump_status)
  = turbo_stream.update frame_id('status') do
    = render Status::Component.new time: calculator.time,
                                   status: calculator.heatpump_status

= turbo_stream.update frame_id('stats'), method: :morph do
  .h-full.w-full.flex.flex-col.gap-3 id= "stats-#{timeframe.id}"
    .flex-1.flex.gap-5
      // Clip
      .flex.gap-10.items-end.px-3.md:px-5.py-2.md:py-3.xl:py-4
        .w-5.border-b-2.border-t-2.border-l-2.border-slate-500.h-full.flex.justify-center
          .flex.items-center.justify-center.text-sm.md:text-lg.-ml-5.text-slate-500.dark:text-slate-400
            - if calculator.heatpump_heating_power
              = link_to heatpump_home_path(sensor: 'heatpump_heating_power', timeframe:),
                        class: 'click-animation bg-white dark:bg-slate-900 py-2 md:py-4 pl-3',
                        title: SensorConfig.x.display_name(:heatpump_heating_power),
                        data: { \
                          controller: 'tippy',
                          tippy_placement_value: 'right',
                          tippy_force_tap_to_close_value: false,
                          tippy_touch_value: 'long',
                          turbo_frame: frame_id('chart', timeframe:),
                          turbo_action: 'replace',
                          turbo_prefetch: 'false',
                          'stats-with-chart--component-target': 'current',
                          sensor: 'heatpump_heating_power',
                          value: calculator.heatpump_heating_power,
                          time: calculator.time.to_i,
                          action: 'stats-with-chart--component#startLoop',
                          stats_with_chart__component_sensor_param: 'heatpump_heating_power',
                        } do
                - method = timeframe.now? ? :to_watt : :to_watt_hour
                div data= { 'stats-with-chart--component-target': sensor == :heatpump_heating_power ? 'current' : nil, sensor: sensor, value: calculator.heatpump_heating_power, time: calculator.time.to_i }
                  = Number::Component.new(value: calculator.heatpump_heating_power).public_send method

      // Inner content
      .flex-1.flex.relative
        - if calculator.heatpump_cop
          .absolute.left-5.top-5.md:left-10.md:top-10
            = link_to url_for(controller: 'home', sensor: 'heatpump_cop', timeframe:),
                      class: 'click-animation inline-block',
                      data: { \
                        turbo_frame: frame_id('chart', timeframe:),
                        turbo_action: 'replace',
                        turbo_prefetch: 'false',
                        'stats-with-chart--component-target': 'current',
                        sensor: 'heatpump_cop',
                        value: calculator.heatpump_cop,
                        time: calculator.time.to_i,
                        action: 'stats-with-chart--component#startLoop',
                        stats_with_chart__component_sensor_param: 'heatpump_cop',
                      } do
              = render RectBadge::Component.new(title: SensorConfig.x.display_name(:heatpump_cop)) do
                = Number::Component.new(value: calculator.heatpump_cop).to_plain

        - if calculator.outdoor_temp
          .absolute.right-5.top-5.md:right-10.md:top-10
            = link_to url_for(controller: 'home', sensor: 'outdoor_temp', timeframe:),
                      class: 'click-animation inline-block',
                      data: { \
                        turbo_frame: frame_id('chart', timeframe:),
                        turbo_action: 'replace',
                        turbo_prefetch: 'false',
                        'stats-with-chart--component-target': 'current',
                        sensor: 'outdoor_temp',
                        value: calculator.outdoor_temp,
                        time: calculator.time.to_i,
                        action: 'stats-with-chart--component#startLoop',
                        stats_with_chart__component_sensor_param: 'outdoor_temp',
                      } do
              = render RectBadge::Component.new(title: SensorConfig.x.display_name(:outdoor_temp)) do
                = Number::Component.new(value: calculator.outdoor_temp).to_grad_celsius

        = render SegmentContainer::Component.new tippy_placement: 'bottom',
                                                 calculator:,
                                                 timeframe: do |container|
          - if calculator.heatpump_heating_power >= calculator.heatpump_power
            - container.with_segment :heatpump_power_env, inline: true
            - if timeframe.now?
              - container.with_segment :heatpump_power,
                                       title: t('splitter.total'),
                                       percent: calculator.heatpump_power_percent_heating,
                                       inline: true
            - else
              - container.with_segment :heatpump_power_pv, inline: true
              - container.with_segment :heatpump_power_grid, inline: true

          - elsif calculator.heatpump_heating_power.positive?
            - container.with_error do
              => t('splitter.total')
              == '&gt;'
              =< t('sensors.heatpump_heating_power')
