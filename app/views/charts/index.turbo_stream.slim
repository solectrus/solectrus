= turbo_stream.update 'nav' do
  = render Timeframe::Component.new(timeframe:)

  - if timeframe.now? && SensorConfig.x.exists?(:system_status)
    = render Status::Component.new time: calculator.time,
                                   system_status: calculator.system_status,
                                   system_status_ok: calculator.system_status_ok

= turbo_stream.update 'second-nav-desktop' do
  = render Nav::Sub::Component.new do |c|
    = c.with_items nav_items

= turbo_stream.update 'second-nav-mobile' do
  = render Nav::Sub::Component.new do |c|
    = c.with_items nav_items

= turbo_stream.update 'chart' do
  .flex.flex-col.flex-auto.sm:gap-2
    - unless timeframe.out_of_range?
      = render ChartSelector::Component.new(sensor:, timeframe:)
      = render ChartLoader::Component.new(sensor:, timeframe:)

      - if sensor == :inverter_power && timeframe.day?
        = render ForecastComment::Component.new(calculator:, sensor:, timeframe:)
