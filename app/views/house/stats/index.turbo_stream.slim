= turbo_stream.update frame_id('nav') do
  = render Timeframe::Component.new(timeframe:)

- if timeframe.now? && SensorConfig.x.exists?(:system_status)
  = turbo_stream.update frame_id('status') do
    = render Status::Component.new time: calculator.time,
                                   status: calculator.system_status,
                                   status_ok: calculator.system_status_ok

turbo-stream action="morph" target= frame_id('stats') children-only= true
  template
    div
      .h-full.w-full.flex.flex-col.gap-3
        - unless timeframe.now?
          .flex.flex-col.items-center.w-full
            .text-xl data-controller= 'tippy' title= SensorConfig.x.name(:house_power) data-tippy-placement= 'top'
              = Number::Component.new(value: calculator.house_power).to_watt_hour
            .w-full
              = render SplittedCosts::Component.new( \
                  costs: calculator.house_costs,
                  power_grid_ratio: calculator.house_power_grid_ratio,
                )

        .flex-1.flex
          = render SegmentContainer::Component.new tippy_placement: 'right',
                                                   calculator:,
                                                   timeframe: do |balance|
            ruby:
              if timeframe.now?
                # Fixed order, because changing order can't be animated
                number = 0
                Array.new(10) { |index| format('custom_%02d_power', index + 1).to_sym }.each do |sensor|
                  next unless SensorConfig.x.exists?(sensor)
                  next if sensor.in? SensorConfig.x.custom_excluded_from_house_power

                  number += 1
                  balance.with_segment sensor,
                                       inline: true,
                                       color_index: SensorConfig.x.custom_count - number
                end
              else
                # Order by value (ascending)
                Array.new(10) { |index| format('custom_%02d_power', index + 1).to_sym }
                  .sort_by { |sensor| calculator.public_send(sensor).to_f }
                  .each.with_index(0) do |sensor, index|
                    next if sensor.in? SensorConfig.x.custom_excluded_from_house_power

                    balance.with_segment sensor,
                                        inline: true,
                                        color_index: 10 - index
                  end
              end

            - balance.with_segment :house_power_without_custom,
                                   inline: true
