= turbo_stream.update frame_id('nav') do
  = render Timeframe::Component.new(timeframe:)

- if timeframe.now? && SensorConfig.x.exists?(:system_status)
  = turbo_stream.update frame_id('status') do
    = render Status::Component.new time: calculator.time

= turbo_stream.update frame_id('stats'), method: :morph do
  .h-full.w-full.flex.flex-col.gap-3 id= "stats-#{timeframe.id}"
    - unless timeframe.now?
      .ml-5.md:ml-20
        .flex.flex-col.items-center.w-full
          .w-full
            = render SplittedCosts::Component.new( \
                costs: calculator.house_costs,
                power_grid_ratio: calculator.house_power_grid_ratio,
              )

    .flex-1.flex.gap-5
      // Clip
      .flex.gap-10.items-end.px-3.md:px-5.py-2.md:py-3.xl:py-4
        .w-5.border-b-2.border-t-2.border-l-2.border-slate-500.h-full.flex.justify-center
          .flex.items-center.justify-center.text-sm.md:text-lg.-ml-5.text-slate-500.dark:text-slate-400
            = link_to house_home_path(sensor: 'house_power', timeframe:),
                      class: 'bg-white dark:bg-slate-900 py-2 md:py-4 pl-3',
                      title: SensorConfig.x.display_name(:house_power),
                      data: { \
                        controller: 'tippy',
                        tippy_placement_value: 'right',
                        tippy_force_tap_to_close_value: false,
                        tippy_touch_value: 'long',
                        turbo_frame: frame_id('chart', timeframe:),
                        turbo_action: 'replace',
                        turbo_prefetch: 'false',
                        action: 'stats-with-chart--component#startLoop',
                        stats_with_chart__component_sensor_param: 'house_power',
                      } do
              - method = timeframe.now? ? :to_watt : :to_watt_hour
              div data= { 'stats-with-chart--component-target': sensor == :house_power ? 'current' : nil, sensor: sensor, value: calculator.house_power, time: calculator.time.to_i }
                = Number::Component.new(value: calculator.house_power).public_send method

              - unless calculator.house_power_valid?
                .text-center[
                  data-controller= 'tippy'
                  title= t('layout.house_power_invalid')
                  data-tippy-placement-value= 'right'
                  data-tippy-touch-value= 'true'
                ]
                  i.fa.fa-circle-exclamation

      // Inner content
      .flex-1.flex
        = render SegmentContainer::Component.new tippy_placement: 'bottom',
                                                  calculator:,
                                                  timeframe: do |balance|
          ruby:
            SensorConfig.x.included_custom_sensor_names
              .sort_by { |sensor| calculator.public_send(sensor).to_f }
              .each.with_index(0) do |sensor, index|
                balance.with_segment sensor,
                                      inline: true,
                                      color_index: SensorConfig.x.existing_custom_sensor_count - index
              end

          - balance.with_segment :house_power_without_custom, inline: true
