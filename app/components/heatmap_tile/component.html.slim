- if timeframe.year?
  .w-full.grid.text-xs.sm:text-sm class= 'grid-cols-[minmax(2rem,1fr)_repeat(31,minmax(0.5rem,1fr))] gap-x-0.5 sm:gap-x-0.5 gap-y-0.5 sm:gap-y-0.5 items-center'
    - months.reverse_each do |month|
      .text-right.pr-1.flex.items-center.justify-end.tabular-nums.sm:pr-2.text-xs.leading-none
        = t('date.abbr_month_names')[month]

      - (1..31).each do |day|
        - if (value = daily_value_for(month, day))
          - date = Date.new(current_year, month, day)
          - if date
            = link_to root_path(sensor, timeframe: date.strftime('%Y-%m-%d')),
                      class: ['aspect-square', background_class(value)],
                      style: "opacity: #{opacity(value)}",
                      data: { controller: 'tippy' } do
                .hidden data-tippy-target= 'html'
                  strong
                    = l(date)

                  - if sensor == :grid_power
                    table
                      tbody
                        - grid_fields.each do |field|
                          tr
                            td.text-left.pr-2
                              - case field
                              - when :grid_revenue
                                = SensorConfig.x.display_name(:grid_export_power)
                              - when :grid_costs
                                = SensorConfig.x.display_name(:grid_import_power)
                            td.text-right.tabular-nums
                              =< Number::Component.new(value: value[field]).to_eur(negative: field == :grid_costs, precision: 0)

                      tfoot.border-t
                        tr
                          td Saldo
                          td.text-right.tabular-nums
                            = Number::Component.new(value: grid_eur_diff(value).abs).to_eur(precision: 0, negative: grid_eur_diff(value).negative?)
                  - else
                    br
                    = Number::Component.new(value: value).to_watt_hour(unit: :kilo)
        - else
          div

    / Empty cell for month column alignment
    div
    - (1..31).each do |day|
      .text-center.text-xs.sm:text-sm.sm:mt-1
        = day.odd? ? day : ''

- elsif timeframe.all?
  .w-full.grid.text-xs.sm:text-sm class= 'grid-cols-[minmax(2rem,1fr)_repeat(12,minmax(1rem,1fr))] gap-0.5 sm:gap-1'
    - years.reverse_each do |year|
      .text-right.pr-1.flex.items-center.justify-end.tabular-nums.sm:pr-2
        = year

      - (1..12).each do |month|
        - if (value = value_for(year, month))
          - date = Date.new(year, month)
          = link_to root_path(sensor, timeframe: date.strftime('%Y-%m')),
                    class: ['aspect-square', background_class(value)],
                    style: "opacity: #{opacity(value)}",
                    data: { controller: 'tippy' } do
              .hidden data-tippy-target= 'html'
                strong
                  = l(date, format: :month)

                - if sensor == :grid_power
                  table
                    tbody
                      - grid_fields.each do |field|
                        tr
                          td.text-left.pr-2
                            - case field
                            - when :grid_revenue
                              = SensorConfig.x.display_name(:grid_export_power)
                            - when :grid_costs
                              = SensorConfig.x.display_name(:grid_import_power)
                          td.text-right.tabular-nums
                            =< Number::Component.new(value: value[field]).to_eur(negative: field == :grid_costs, precision: 0)

                    tfoot.border-t
                      tr
                        td Saldo
                        td.text-right.tabular-nums
                          = Number::Component.new(value: grid_eur_diff(value).abs).to_eur(precision: 0, negative: grid_eur_diff(value).negative?)
                - else
                  br
                  = Number::Component.new(value: value).to_watt_hour(unit: :kilo)
        - else
          div
    div
    - (1..12).each do |month|
      .text-center.text-xs.sm:text-sm.sm:mt-1
        = t('date.abbr_month_names')[month]
