- if block
  = tag.div id: "segment-#{sensor}",
            class: ['leading-none flex items-center justify-around text-center px-2 sm:px-4 overflow-hidden transition-[font-size,height] motion-reduce:duration-100 motion-safe:duration-1000 group', color_class, ('!border-0' if tiny?)],
            style: 'height: var(--segment-height); font-size: var(--segment-font-size)',
            title:,
            data: { \
              controller: 'tippy',
              tippy_placement_value: parent.tippy_placement,
              tippy_force_tap_to_close_value: false,
              tippy_touch_value: 'long',
            } do
    = block.call

- else
  = link_to_or_div url,
            id: "segment-#{sensor}",
            class: ['leading-none flex items-center justify-around text-center px-2 sm:px-4 overflow-hidden transition-[font-size,height] motion-reduce:duration-100 motion-safe:duration-1000 group', color_class, ('!border-0' if tiny?)],
            style: 'height: var(--segment-height); font-size: var(--segment-font-size)',
            title:,
            data: { \
              controller: 'tippy',
              tippy_placement_value: parent.tippy_placement,
              tippy_force_tap_to_close_value: false,
              tippy_touch_value: 'long',
              turbo_frame: helpers.frame_id('chart', timeframe:),
              turbo_action: 'replace',
              turbo_prefetch: 'false',
              action: 'stats-with-chart--component#startLoop',
              stats_with_chart__component_sensor_param: sensor,
            } do
    div class= "flex gap-2 lg:gap-3 #{inline ? 'w-full flex-row justify-between' : ('flex-col' if large?)} items-center {'click-animation' if url}"
      - if icon_class
        i.fa class= icon_class style="font-size: #{icon_size}%;"

      .font-light.uppercase.leading-tight class= (large? || inline ? 'lg:block' : 'hidden')
        = title

      div data= { 'stats-with-chart--component-target': 'current', sensor: sensor, value: masked_value, time: calculator.time.to_i }
        = Number::Component.new(value:).public_send(now? ? :to_watt : :to_watt_hour)

      - if sensor == :grid_export_power && calculator.respond_to?(:grid_export_limit_active?) && calculator.grid_export_limit_active?
        i.fa.fa-circle-exclamation.fa-xs

      .hidden id="tippy-tooltip-#{sensor}" data-tippy-target="html"
        .flex.flex-col.items-center.justify-center.min-w-32.p-2.gap-2
          - if icon_class
            div
              i.fa.fa-2xl class= icon_class

          .uppercase
            = title

          - if now?
            = Number::Component.new(value:).to_watt(precision: 3)

            - if sensor == :grid_export_power && calculator.respond_to?(:grid_export_limit_active?) && calculator.grid_export_limit_active?
              .text-xs.text-center.mt-2
                = I18n.t('sensors.grid_export_limit')
                br
                = Number::Component.new(value: calculator.grid_export_limit).to_percent(precision: 0, klass: 'text-xs')

          - else
            = Number::Component.new(value:).to_watt_hour(precision: 3)

            - if costs
              = render SplittedCosts::Component.new(power_grid_ratio:, costs:)

            - elsif sensor == :grid_export_power
              = Number::Component.new(value: calculator.got).to_eur(klass: 'text-xl')

            - elsif sensor == :grid_import_power
              = Number::Component.new(value: calculator.paid.abs).to_eur(negative: true, klass: 'text-xl')

css:
  #segment-#{sensor} {
    --segment-font-size: #{font_size(max: 90)}%;
    --segment-height: #{tiny? ? 0 : percent}%;
  }

  @media (min-width: 768px) and (min-height: 800px) {
    #segment-#{sensor} {
      --segment-font-size: #{font_size(max: 140)}%;
    }
  }

  @media (min-width: 1024px) and (min-height: 800px) {
    #segment-#{sensor} {
      --segment-font-size: #{font_size(max: 115)}%;
    }
  }

  @media (min-width: 1280px) and (min-height: 800px) {
    #segment-#{sensor} {
      --segment-font-size: #{font_size(max: 140)}%;
    }
  }
