- if block
  = tag.div id: "segment-#{sensor}",
            class: ['segment', color_class, ('border-0!' if tiny?), ('hidden' if hidden), ('segment-inline' if inline)],
            style: "height: #{percent.round(1)}%; --icon-scale: #{icon_scale / 100.0}",
            title:,
            data: { \
              controller: 'tippy',
              tippy_placement_value: parent.tippy_placement,
              tippy_force_tap_to_close_value: false,
              tippy_touch_value: 'long',
            } do
    = block.call

- else
  = link_to_or_div url,
            id: "segment-#{sensor}",
            class: ['segment', color_class, ('border-0!' if tiny?), ('hidden' if hidden), ('segment-inline' if inline), ('group' if url)],
            style: "height: #{percent.round(1)}%; --icon-scale: #{icon_scale / 100.0}",
            title:,
            data: { \
              controller: 'tippy',
              tippy_placement_value: parent.tippy_placement,
              tippy_force_tap_to_close_value: false,
              tippy_touch_value: 'long',
              turbo_frame: helpers.frame_id('chart', timeframe:),
              turbo_action: 'replace',
              turbo_prefetch: 'false',
              action: 'stats-with-chart--component#startLoop',
              stats_with_chart__component_sensor_param: sensor,
            } do
    .content class= "#{'click-animation' if url}"
      - if icon_class
        i.fa.icon class= icon_class

      .font-light.leading-tight.title
        = title

      .value data= { 'stats-with-chart--component-target': 'current', sensor: sensor, value: masked_value, time: calculator.time&.to_i }
        = Number::Component.new(value:).public_send(number_method)

      - if sensor == :grid_export_power && calculator.respond_to?(:grid_export_limit_active?) && calculator.grid_export_limit_active?
        i.fa.fa-circle-exclamation

      .hidden id="tippy-tooltip-#{sensor}" data-tippy-target="html"
        .flex.flex-col.items-center.justify-center.min-w-32.p-2.gap-2
          - if icon_class
            div
              i.fa.fa-2xl class= icon_class

          = title

          - if now?
            = Number::Component.new(value:).to_watt(precision: 3)

            - if sensor == :grid_export_power && calculator.respond_to?(:grid_export_limit_active?) && calculator.grid_export_limit_active?
              .text-xs.text-center.mt-2
                = I18n.t('sensors.grid_export_limit')
                br
                = Number::Component.new(value: calculator.grid_export_limit).to_percent(precision: 0, klass: 'text-xs')

          - else
            = Number::Component.new(value:).to_watt_hour(precision: 3)

            - if costs
              = render SplittedCosts::Component.new(power_grid_ratio:, costs:)

            - elsif sensor == :grid_export_power
              = Number::Component.new(value: calculator.got).to_eur(klass: 'text-xl')

            - elsif sensor == :grid_import_power
              = Number::Component.new(value: calculator.paid.abs).to_eur(negative: true, klass: 'text-xl')

            - if multi_inverter? && ApplicationPolicy.multi_inverter?
              table.mt-3
                tbody
                  - (SensorConfig.x.inverter_sensor_names - [:inverter_power]).reverse_each do |sensor_name|
                    - if (value = calculator.public_send(sensor_name))&.positive?
                      tr
                        td.text-left.pr-1
                          = SensorConfig.x.display_name(sensor_name)
                        td.text-right.pl-1.tabular-nums
                          = Number::Component.new(value:).public_send(number_method, precision: 3)
