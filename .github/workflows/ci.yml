name: Continuous integration

on:
  push:
    branches:
      - develop
      - next
    tags:
      - v*
  pull_request:
    branches:
      - develop

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    permissions:
      contents: read

    services:
      influxdb:
        image: influxdb:2.7-alpine
        ports: ['8086:8086']
        env:
          INFLUXD_HTTP_BIND_ADDRESS: ':8086'
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: my-user
          DOCKER_INFLUXDB_INIT_PASSWORD: my-password
          DOCKER_INFLUXDB_INIT_ORG: my-org
          DOCKER_INFLUXDB_INIT_BUCKET: my-bucket
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: my-token

      postgres:
        image: postgres:17-alpine
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASSWORD: postgres
      RAILS_ENV: test
      DISABLE_SPRING: 1
      CI: true
      RUBY_YJIT_ENABLE: 1
      LANG: de_DE.UTF-8

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: yarn
          node-version-file: 'package.json'

      - name: Install Yarn packages
        run: bin/yarn install --immutable

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('./node_modules/playwright/package.json').version")" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: yarn playwright install --with-deps chromium

      - name: Lint with RuboCop
        run: bin/rubocop --parallel

      - name: Brakeman security scan
        run: bin/brakeman

      - name: Lint with ESLint
        run: bin/yarn lint

      - name: Check for TypeScript errors
        run: bin/yarn tsc

      - name: Lint with SlimLint
        run: bundle exec slim-lint .

      - name: Setup PostgreSQL
        run: bin/rails db:create

      - name: Run Unit and System tests with RSpec
        run: bin/rspec

      - uses: qltysh/qlty-action/coverage@v1
        with:
          token: ${{secrets.QLTY_COVERAGE_TOKEN}}
          files: coverage/.resultset.json

      - name: Clean test artifacts before size check
        run: rm -f public/vite-test/assets/test-*.js

      - name: Check JS size limit
        run: yarn size-limit

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Playwright artifacts
          path: |
            tmp/capybara/
          if-no-files-found: ignore

  build:
    runs-on: ubuntu-24.04
    needs: test
    if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) }}
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tag annotations
        # https://github.com/actions/checkout/issues/290
        run: git fetch --tags --force

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: ghcr.io/${{ github.repository }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=next,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}
            type=raw,value=pr-3160,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}
            type=raw,value=pr-3349,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}
            type=raw,value=pr-3432,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}
            type=raw,value=pr-3533,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}
            type=raw,value=pr-3747,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}
            type=raw,value=pr-4151,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}
            type=raw,value=pr-4195,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set ENV values
        run: |
          echo "COMMIT_TIME=$(git show -s --format=%cI $GITHUB_SHA)" >> $GITHUB_ENV
          echo "COMMIT_VERSION=$(git describe --always --abbrev=7)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          provenance: false
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
            COMMIT_TIME=${{ env.COMMIT_TIME }}
            COMMIT_VERSION=${{ env.COMMIT_VERSION }}
            COMMIT_BRANCH=${{ github.head_ref || github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-24.04
    needs: build
    if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' }}
    timeout-minutes: 30
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Send webhook to start deployment
        env:
          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}
        if: env.DEPLOY_HOOK != null
        run: curl -X POST ${{ env.DEPLOY_HOOK }}

      - name: Notify Honeybadger about deployment
        env:
          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}
          HONEYBADGER_API_KEY: ${{ secrets.HONEYBADGER_API_KEY }}
        if: env.DEPLOY_HOOK != null && env.HONEYBADGER_API_KEY != null
        uses: honeybadger-io/github-notify-deploy-action@v1
        with:
          api_key: ${{ secrets.HONEYBADGER_API_KEY }}
