name: Continuous integration
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-20.04

    services:
      influxdb:
        image: influxdb:2.2.0-alpine
        ports: ['8086:8086']
        env:
          INFLUXD_HTTP_BIND_ADDRESS: ':8086'

      postgres:
        image: postgres:14-alpine
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASSWORD: postgres
      RAILS_ENV: test
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      DISABLE_SPRING: 1
      CI: true

    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v3.1.1
        with:
          cache: yarn

      - name: Install Yarn packages
        run: bin/yarn install --frozen-lockfile

      - name: Lint with RuboCop
        run: bin/rubocop --parallel

      - name: Lint with ESLint
        run: bin/yarn lint

      - name: Lint with SlimLint
        run: bundle exec slim-lint .

      - name: Setup InfluxDB
        run: bin/influxdb-onboarding.sh

      - name: Setup PostgreSQL
        run: bin/rails db:create

      - name: Run tests
        run: bin/rspec

      - name: Send test coverage to CodeClimate
        uses: paambaati/codeclimate-action@v3.0.0
        if: ${{ env.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: true

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Screenshots
          path: tmp/screenshots

  deploy:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
    needs: test

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch tag annotations
        # https://github.com/actions/checkout/issues/290
        run: git fetch --tags --force

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the production image
        run: |
          export COMMIT_TIME=$(git show -s --format=%cI ${GITHUB_SHA})
          export COMMIT_VERSION=$(git describe --always)
          echo $GITHUB_SHA
          echo $COMMIT_TIME
          echo $COMMIT_VERSION
          docker buildx build --build-arg COMMIT_TIME --build-arg COMMIT_VERSION -t app .

      - name: Push the image tagged as DEVELOP to the container registry
        if: github.ref == 'refs/heads/develop'
        run: |
          docker tag app ghcr.io/${{ github.repository }}:develop
          docker push ghcr.io/${{ github.repository }}:develop

      - name: Push the image tagged as LATEST to the container registry
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
        run: |
          docker tag app ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:latest

      - name: Push the image tagged with version to the container registry
        if: startsWith(github.ref, 'refs/tags')
        run: |
          docker tag app ghcr.io/${{ github.repository }}:${GITHUB_REF##*/}
          docker push ghcr.io/${{ github.repository }}:${GITHUB_REF##*/}

      - name: Send webhook to start deployment
        env:
          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}
        if: env.DEPLOY_HOOK != null
        run: curl -X POST ${{ env.DEPLOY_HOOK }}

      - name: Notify Honeybadger about deployment
        env:
          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}
          HONEYBADGER_API_KEY: ${{ secrets.HONEYBADGER_API_KEY }}
        if: env.DEPLOY_HOOK != null && env.HONEYBADGER_API_KEY != null
        uses: honeybadger-io/github-notify-deploy-action@v1
        with:
          api_key: ${{ secrets.HONEYBADGER_API_KEY }}
