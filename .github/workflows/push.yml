name: Continuous integration
on: push

jobs:
  test:
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres:13-alpine
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASSWORD: postgres
      RAILS_ENV: test
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      DISABLE_SPRING: 1

    steps:
      - uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Lint with RuboCop
        run: bundle exec rubocop --parallel

      - name: Lint with SlimLint
        run: bundle exec slim-lint .

      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn packages
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Yarn packages
        run: yarn install --frozen-lockfile

      - name: Run Tests
        run: |
          bundle exec rails db:create
          bundle exec rspec

      - name: Send test coverage to CodeClimate
        uses: paambaati/codeclimate-action@v2.7.5
        with:
          coverageCommand: true

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Screenshots
          path: tmp/screenshots

  deploy:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    needs: test

    steps:
      - uses: actions/checkout@v2

      - name: Login to GitLab Docker Registry
        run: echo ${{ secrets.GITLAB_TOKEN }} | docker login -u gitlab-ci-token --password-stdin ${{ secrets.GITLAB_REGISTRY }}

      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build the production image
        run: |
          export COMMIT_TIME=$(git show -s --format=%cD ${GITHUB_SHA})
          export COMMIT_SHA=${GITHUB_SHA}
          docker build --build-arg COMMIT_TIME --build-arg COMMIT_SHA -t app .

      - name: Push the image tagged as LATEST to the container registry
        if: github.ref == 'refs/heads/develop'
        run: |
          docker tag app ${{ secrets.GITLAB_REGISTRY }}/${{ secrets.GITLAB_REPO }}:latest
          docker push ${{ secrets.GITLAB_REGISTRY }}/${{ secrets.GITLAB_REPO }}:latest

      - name: Push the image tagged as STABLE to the container registry
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag app ${{ secrets.GITLAB_REGISTRY }}/${{ secrets.GITLAB_REPO }}:stable
          docker push ${{ secrets.GITLAB_REGISTRY }}/${{ secrets.GITLAB_REPO }}:stable

      - name: Send notification
        run: curl -X POST ${{ secrets.DEPLOY_HOOK }}
